%% @author Alessandro Sivieri <alessandro.sivieri@mail.polimi.it>
%% @doc Web server for crest, with SSL support.
%% Autogenerated by MochiWeb.
%% @copyright 2010 Alessandro Sivieri

-module(crest_web_ssl).
-export([start/1, stop/0, loop/2]).

%% External API

%% @doc Start the Web server.
%% @spec start([any()]) -> ok
start(Options) ->
    {DocRoot, Options1} = get_option(docroot, Options),
    Loop = fun (Req) ->
                   ?MODULE:loop(Req, DocRoot)
           end,
    mochiweb_http:start([{name, ?MODULE}, {loop, Loop} | Options1]).

%% @doc Stop the Web server.
%% @spec stop() -> ok
stop() ->
    mochiweb_http:stop(?MODULE).

%% @doc Main server loop, serving requests.
%% @spec loop(request(), string()) -> any()
loop(Req, _DocRoot) ->
    "/" ++ Path = Req:get(path),
    ContentType = Req:get_header_value("content-type"),
    log4erl:info("Request (SSL): ~p~n", [Path]),
    case Req:get(method) of
        Method when Method =:= 'GET'; Method =:= 'HEAD' ->
            case string:tokens(Path, "/") of
                _ ->
                    Req:respond({404, [], []})
            end;
        'POST' ->
            case string:tokens(Path, "/") of
                ["crest"|"spawn"] ->
                    Answer = crest_router:route('POST', ["spawn"], Req:parse_post(), ContentType),
                    Req:respond(Answer);
				["crest"|"remote"] ->
                    Answer = crest_router:route('POST', ["remote"], Req:parse_post(), ContentType),
                    Req:respond(Answer);
                _ ->
                    Req:respond({404, [], []})
            end;
        _ ->
            Req:respond({501, [], []})
    end.

%% Internal API

get_option(Option, Options) ->
    {proplists:get_value(Option, Options), proplists:delete(Option, Options)}.
